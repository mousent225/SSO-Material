//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SSO_Material.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PortalEntities : DbContext
    {
        public PortalEntities()
            : base("name=PortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ForgetCard> ForgetCard { get; set; }
        public virtual DbSet<SysCategory> SysCategory { get; set; }
        public virtual DbSet<SysCategoryValue> SysCategoryValue { get; set; }
        public virtual DbSet<HrDeptMaster> HrDeptMaster { get; set; }
        public virtual DbSet<HrEmpMaster> HrEmpMaster { get; set; }
        public virtual DbSet<SysLogHistory> SysLogHistory { get; set; }
        public virtual DbSet<HrDeptMasterFull> HrDeptMasterFull { get; set; }
        public virtual DbSet<ApplicationConfig> ApplicationConfig { get; set; }
        public virtual DbSet<SysRole> SysRole { get; set; }
        public virtual DbSet<SysRoleMapping> SysRoleMapping { get; set; }
        public virtual DbSet<SysUserMapping> SysUserMapping { get; set; }
        public virtual DbSet<SysAuthorization> SysAuthorization { get; set; }
        public virtual DbSet<SysUser> SysUser { get; set; }
        public virtual DbSet<Violation> Violation { get; set; }
        public virtual DbSet<VisitorApplicationMaster> VisitorApplicationMaster { get; set; }
        public virtual DbSet<VisitorCheckDaily> VisitorCheckDaily { get; set; }
        public virtual DbSet<VisitorApplicationDetail> VisitorApplicationDetail { get; set; }
    
        public virtual ObjectResult<SP_FORGETCARD_GETALL_Result> SP_FORGETCARD_GETALL(Nullable<int> dEPTID, string eMPID, string eMPNAME, string pOSITION, string jOBTITLE, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var pOSITIONParameter = pOSITION != null ?
                new ObjectParameter("POSITION", pOSITION) :
                new ObjectParameter("POSITION", typeof(string));
    
            var jOBTITLEParameter = jOBTITLE != null ?
                new ObjectParameter("JOBTITLE", jOBTITLE) :
                new ObjectParameter("JOBTITLE", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FORGETCARD_GETALL_Result>("SP_FORGETCARD_GETALL", dEPTIDParameter, eMPIDParameter, eMPNAMEParameter, pOSITIONParameter, jOBTITLEParameter, fROMDATEParameter, tODATEParameter);
        }
    
        public virtual int SP_FORGETCARD_DELETE(string eMPID, Nullable<System.DateTime> wORKDATE)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FORGETCARD_DELETE", eMPIDParameter, wORKDATEParameter);
        }
    
        public virtual ObjectResult<SP_FORGETCARD_GETINFOR_Result> SP_FORGETCARD_GETINFOR(string eMPID, Nullable<System.DateTime> wORKDATE)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FORGETCARD_GETINFOR_Result>("SP_FORGETCARD_GETINFOR", eMPIDParameter, wORKDATEParameter);
        }
    
        public virtual ObjectResult<SP_SYS_LOG_HISTORY_Result> SP_SYS_LOG_HISTORY(string sUBJECT, Nullable<int> dEPTID, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO)
        {
            var sUBJECTParameter = sUBJECT != null ?
                new ObjectParameter("SUBJECT", sUBJECT) :
                new ObjectParameter("SUBJECT", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var dATEFROMParameter = dATEFROM.HasValue ?
                new ObjectParameter("DATEFROM", dATEFROM) :
                new ObjectParameter("DATEFROM", typeof(System.DateTime));
    
            var dATETOParameter = dATETO.HasValue ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_LOG_HISTORY_Result>("SP_SYS_LOG_HISTORY", sUBJECTParameter, dEPTIDParameter, dATEFROMParameter, dATETOParameter);
        }
    
        public virtual ObjectResult<SP_SYS_GET_LOG_BY_DEPTID_Result> SP_SYS_GET_LOG_BY_DEPTID(Nullable<int> dEPTID)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_GET_LOG_BY_DEPTID_Result>("SP_SYS_GET_LOG_BY_DEPTID", dEPTIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_DEPT_GET_TREE_Result> SP_SYS_DEPT_GET_TREE(Nullable<int> dEPTID)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_DEPT_GET_TREE_Result>("SP_SYS_DEPT_GET_TREE", dEPTIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_GET_MAIL_GROUP_Result> SP_SYS_GET_MAIL_GROUP(Nullable<int> dEPTID, string dEPTNAME)
        {
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var dEPTNAMEParameter = dEPTNAME != null ?
                new ObjectParameter("DEPTNAME", dEPTNAME) :
                new ObjectParameter("DEPTNAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_GET_MAIL_GROUP_Result>("SP_SYS_GET_MAIL_GROUP", dEPTIDParameter, dEPTNAMEParameter);
        }
    
        public virtual ObjectResult<SP_SYS_MAIL_LIST_Result> SP_SYS_MAIL_LIST(Nullable<int> sEARCHTYPE, string eMPID, string eMPNAME, string sEX, string nATION, Nullable<int> dEPTID, Nullable<bool> hASEMAIL)
        {
            var sEARCHTYPEParameter = sEARCHTYPE.HasValue ?
                new ObjectParameter("SEARCHTYPE", sEARCHTYPE) :
                new ObjectParameter("SEARCHTYPE", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var sEXParameter = sEX != null ?
                new ObjectParameter("SEX", sEX) :
                new ObjectParameter("SEX", typeof(string));
    
            var nATIONParameter = nATION != null ?
                new ObjectParameter("NATION", nATION) :
                new ObjectParameter("NATION", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var hASEMAILParameter = hASEMAIL.HasValue ?
                new ObjectParameter("HASEMAIL", hASEMAIL) :
                new ObjectParameter("HASEMAIL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_MAIL_LIST_Result>("SP_SYS_MAIL_LIST", sEARCHTYPEParameter, eMPIDParameter, eMPNAMEParameter, sEXParameter, nATIONParameter, dEPTIDParameter, hASEMAILParameter);
        }
    
        public virtual ObjectResult<SP_EMPLOYEE_INFOR_Result> SP_EMPLOYEE_INFOR(string name, string eMPID)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EMPLOYEE_INFOR_Result>("SP_EMPLOYEE_INFOR", nameParameter, eMPIDParameter);
        }
    
        public virtual ObjectResult<SP_SYS_USER_LOGIN_Result> SP_SYS_USER_LOGIN(string eMPID, string pASSWORD)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var pASSWORDParameter = pASSWORD != null ?
                new ObjectParameter("PASSWORD", pASSWORD) :
                new ObjectParameter("PASSWORD", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_USER_LOGIN_Result>("SP_SYS_USER_LOGIN", eMPIDParameter, pASSWORDParameter);
        }
    
        public virtual int SP_FORGETCARD_UPDATE(string eMPID, Nullable<System.DateTime> wORKDATE, string tIMEIN, string tIMEOUT, string sECURITYNAME, string tEMPORATYCARD, string gATENUMBER, string rEASON, string rEASONOTHER)
        {
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var wORKDATEParameter = wORKDATE.HasValue ?
                new ObjectParameter("WORKDATE", wORKDATE) :
                new ObjectParameter("WORKDATE", typeof(System.DateTime));
    
            var tIMEINParameter = tIMEIN != null ?
                new ObjectParameter("TIMEIN", tIMEIN) :
                new ObjectParameter("TIMEIN", typeof(string));
    
            var tIMEOUTParameter = tIMEOUT != null ?
                new ObjectParameter("TIMEOUT", tIMEOUT) :
                new ObjectParameter("TIMEOUT", typeof(string));
    
            var sECURITYNAMEParameter = sECURITYNAME != null ?
                new ObjectParameter("SECURITYNAME", sECURITYNAME) :
                new ObjectParameter("SECURITYNAME", typeof(string));
    
            var tEMPORATYCARDParameter = tEMPORATYCARD != null ?
                new ObjectParameter("TEMPORATYCARD", tEMPORATYCARD) :
                new ObjectParameter("TEMPORATYCARD", typeof(string));
    
            var gATENUMBERParameter = gATENUMBER != null ?
                new ObjectParameter("GATENUMBER", gATENUMBER) :
                new ObjectParameter("GATENUMBER", typeof(string));
    
            var rEASONParameter = rEASON != null ?
                new ObjectParameter("REASON", rEASON) :
                new ObjectParameter("REASON", typeof(string));
    
            var rEASONOTHERParameter = rEASONOTHER != null ?
                new ObjectParameter("REASONOTHER", rEASONOTHER) :
                new ObjectParameter("REASONOTHER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FORGETCARD_UPDATE", eMPIDParameter, wORKDATEParameter, tIMEINParameter, tIMEOUTParameter, sECURITYNAMEParameter, tEMPORATYCARDParameter, gATENUMBERParameter, rEASONParameter, rEASONOTHERParameter);
        }
    
        public virtual ObjectResult<SP_APPLICATION_CONFIG_GETALL_Result> SP_APPLICATION_CONFIG_GETALL(string name, Nullable<int> deptId, string kind, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var kindParameter = kind != null ?
                new ObjectParameter("Kind", kind) :
                new ObjectParameter("Kind", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APPLICATION_CONFIG_GETALL_Result>("SP_APPLICATION_CONFIG_GETALL", nameParameter, deptIdParameter, kindParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_APPLICATION_CONFIG_GETLIST_Result> SP_APPLICATION_CONFIG_GETLIST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_APPLICATION_CONFIG_GETLIST_Result>("SP_APPLICATION_CONFIG_GETLIST");
        }
    
        public virtual ObjectResult<SP_VISITOR_APPLICATION_MASTER_GET_Result> SP_VISITOR_APPLICATION_MASTER_GET(Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE, string aPPLICATIONTYPE, string uSERID, string aPPROVESTATUS)
        {
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            var aPPLICATIONTYPEParameter = aPPLICATIONTYPE != null ?
                new ObjectParameter("APPLICATIONTYPE", aPPLICATIONTYPE) :
                new ObjectParameter("APPLICATIONTYPE", typeof(string));
    
            var uSERIDParameter = uSERID != null ?
                new ObjectParameter("USERID", uSERID) :
                new ObjectParameter("USERID", typeof(string));
    
            var aPPROVESTATUSParameter = aPPROVESTATUS != null ?
                new ObjectParameter("APPROVESTATUS", aPPROVESTATUS) :
                new ObjectParameter("APPROVESTATUS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VISITOR_APPLICATION_MASTER_GET_Result>("SP_VISITOR_APPLICATION_MASTER_GET", fROMDATEParameter, tODATEParameter, aPPLICATIONTYPEParameter, uSERIDParameter, aPPROVESTATUSParameter);
        }
    
        public virtual int SP_VENDOR_DELETE(Nullable<int> id, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VENDOR_DELETE", idParameter, userIdParameter);
        }
    
        public virtual int SP_VENDOR_INSERT(string companyName, string address, Nullable<int> deptId, string personInCharge, string contactPerson, string identityCard, string phoneNumber, string email, Nullable<bool> active, string userId)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var personInChargeParameter = personInCharge != null ?
                new ObjectParameter("PersonInCharge", personInCharge) :
                new ObjectParameter("PersonInCharge", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VENDOR_INSERT", companyNameParameter, addressParameter, deptIdParameter, personInChargeParameter, contactPersonParameter, identityCardParameter, phoneNumberParameter, emailParameter, activeParameter, userIdParameter);
        }
    
        public virtual int SP_VENDOR_UPDATE(Nullable<int> id, string companyName, string address, Nullable<int> deptId, string personInCharge, string contactPerson, string identityCard, string phoneNumber, string email, Nullable<bool> active, string userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var deptIdParameter = deptId.HasValue ?
                new ObjectParameter("DeptId", deptId) :
                new ObjectParameter("DeptId", typeof(int));
    
            var personInChargeParameter = personInCharge != null ?
                new ObjectParameter("PersonInCharge", personInCharge) :
                new ObjectParameter("PersonInCharge", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var identityCardParameter = identityCard != null ?
                new ObjectParameter("IdentityCard", identityCard) :
                new ObjectParameter("IdentityCard", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_VENDOR_UPDATE", idParameter, companyNameParameter, addressParameter, deptIdParameter, personInChargeParameter, contactPersonParameter, identityCardParameter, phoneNumberParameter, emailParameter, activeParameter, userIdParameter);
        }
    
        public virtual ObjectResult<SP_SYS_USER_LIST_Result> SP_SYS_USER_LIST(Nullable<int> sEARCHTYPE, string eMPID, string eMPNAME, Nullable<int> dEPTID, string sEX, string nATION, Nullable<bool> hASEMAIL)
        {
            var sEARCHTYPEParameter = sEARCHTYPE.HasValue ?
                new ObjectParameter("SEARCHTYPE", sEARCHTYPE) :
                new ObjectParameter("SEARCHTYPE", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var eMPNAMEParameter = eMPNAME != null ?
                new ObjectParameter("EMPNAME", eMPNAME) :
                new ObjectParameter("EMPNAME", typeof(string));
    
            var dEPTIDParameter = dEPTID.HasValue ?
                new ObjectParameter("DEPTID", dEPTID) :
                new ObjectParameter("DEPTID", typeof(int));
    
            var sEXParameter = sEX != null ?
                new ObjectParameter("SEX", sEX) :
                new ObjectParameter("SEX", typeof(string));
    
            var nATIONParameter = nATION != null ?
                new ObjectParameter("NATION", nATION) :
                new ObjectParameter("NATION", typeof(string));
    
            var hASEMAILParameter = hASEMAIL.HasValue ?
                new ObjectParameter("HASEMAIL", hASEMAIL) :
                new ObjectParameter("HASEMAIL", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SYS_USER_LIST_Result>("SP_SYS_USER_LIST", sEARCHTYPEParameter, eMPIDParameter, eMPNAMEParameter, dEPTIDParameter, sEXParameter, nATIONParameter, hASEMAILParameter);
        }
    
        public virtual ObjectResult<SP_VENDOR_GET_Result> SP_VENDOR_GET(Nullable<int> iD, string eMPID, Nullable<System.DateTime> fROMDATE, Nullable<System.DateTime> tODATE)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var eMPIDParameter = eMPID != null ?
                new ObjectParameter("EMPID", eMPID) :
                new ObjectParameter("EMPID", typeof(string));
    
            var fROMDATEParameter = fROMDATE.HasValue ?
                new ObjectParameter("FROMDATE", fROMDATE) :
                new ObjectParameter("FROMDATE", typeof(System.DateTime));
    
            var tODATEParameter = tODATE.HasValue ?
                new ObjectParameter("TODATE", tODATE) :
                new ObjectParameter("TODATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VENDOR_GET_Result>("SP_VENDOR_GET", iDParameter, eMPIDParameter, fROMDATEParameter, tODATEParameter);
        }
    }
}
